---
layout: post
title: c/cpp常见错误和问题
description: 都是一些经典的问题～而且是初学者最容易出错的地方。
category: blog
---
#####1.全局变量和局部变量在内存中：
一个由c/C++编译的程序占用的内存分为以下几个部分
<ul>
	<li>1、栈区（stack）— 由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>
	<li>2、堆区（heap） — 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。</li>
	<i>3、全局区（静态区）（static）—，全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域(.data)，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域(.bss)。 – 程序结束后由系统释放。</li>
	<li>4、文字常量区 —常量字符串就是放在这里的(.rodata)。 程序结束后由系统释放。</li>
	<li>5、程序代码区—存放函数体的二进制代码(.text)。</li>
	<li>全局变量储存在静态数据库，局部变量在堆栈</li>
</ul>

#####2.设计一个购物车的mysql表结构
	会员通过“会员登录页面”登录成功后进入“图书列表界面”。会员在此可以选购图书；选购完毕后进入“购物车清单页面”，查看购物信息。会员在此可以修改所购图书数量或者删除图书；确认购物车信息后进入“订单信息页面”，会员需要在此填写收货人的详细信息，并选择配送方式与支付方式；订单成功提交后进入“订单详情页面”，至此购物流程结束。

#####3.函数调用值的传递：
先把实参值传递给形参！形参和实参实相互独立的，他们自己本身改变，不会影响对方！
C语言的参数传递有`传值`和`传地址`两种方式。

传值的过程：
<ul>
	<li>（1）行参与实参各占一个独立的存储空间。</li>
	<li>（2）行参的存储空间是函数被调用时才分配的。调用开始，系统为行参开辟一个临时存储区，然后将各实参之值传递给行参，这时行参就得到了实参的值。</li>
	<li>（3）函数返回时，临时存储区也被撤销。</li>
</ul>

传值的特点：`单向传递`，即函数中对行参变量的操作不会影响到调用函数中的实参变量。

值传递和引用传递的区别：
<ul>
	<li>1． 在函数定义格式上有不同：</li>
		值传递在定义处是：Exchg1(int x, int y);
		引用传递在这义处是：Exchg1(int &x, int &y);
	<li>2． 调用时有相同的格式：</li>
		值传递：Exchg1(a,b);
		引用传递：Exchg3(a,b);
	<li>3． 功能上是不同的：</li>
		值传递的函数里操作的不是a,b变量本身，只是将a,b值赋给了x,y函数里操作的只是x,y变量而不是a,b，显示a,b的值不会被Exchg1函数所修改。
		引用传递Exchg3(a,b)函数里是用a,b分别代替了x,y。函数里操作的是a,b。
</ul>

#####4.内存分配：
内存的分配方式,内存分配方式有三种：
<ul>
	<li>（1） 从静态存储区域分配。内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在。例如全局变量，static 变量。</li>
	<li>（2） 在栈上创建。在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。</li>
	<li>（3） 从堆上分配，亦称动态内存分配。程序在运行的时候用malloc 或new 申请任意多少的内存，程序员自己负责在何时用free 或delete 释放内存。动态内存的生存期由我们决定，使用非常灵活，但问题也最多。</li>
</ul>

#####其他
<p>1.堆和栈的区别</p>
堆主要用来动态分配内存，较大的数据在堆中分配，如 new
栈静态分配，无需释放
<p>2.内存分配的三种方式</p>
静态存储区分配
堆分配
栈分配
<p>3.位运算</p>
判断奇偶数 ` i & 0×1`
<p>4.栈后进先出，队列先进先出。</p>
